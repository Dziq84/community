// Copyright (c) 2016 Beha
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// Current settings version. If it changes, newchats must reinitialize.
newchats.VERSION = 1

// Set default settings.
newchats.setup = [
    newchats.set.chatcolour 0xFFFFFF
    newchats.set.version $newchats.VERSION
]

newchats.argsfromn = [
    local args
    args = ""
    loop i $arg1 [
        args = (format "%1 $arg%2" $args ( + $i 1 ))
    ]
    result $args
]

newchats.setdesc = [
    local name desc params
    name = $arg1
    desc = $arg2
    params = $arg3
    // Set meta info.
    alias (concatword newchats.info.desc. $name) $desc
    alias (concatword newchats.info.desc.params. $name) $params
    // Include params in main desc for alises.
    setdesc $name (format "%1^nargs: %2" $desc $params) $params
    setcomplete $name 1
]

// Declare a setting.
newchats.setting = [
    local name desc params
    name = $arg1
    desc = $arg2
    params = $arg3
    alias (concatword newchats.set. $name) [
        alias (concatword newchats.settings. @name) $arg1
        setpersist (concatword newchats.settings. @name) 1
        newchats.setdesc (concatword newchats.set. @name) (format "%1^nvalue: %2" @desc $arg1) @params
    ]
    newchats.setdesc (concatword newchats.set. $name) (format "%1^nvalue:" $desc) $params
    setpersist (concatword newchats.settings. $name) 1
]

// Declare a shorthand.
newchats.short = [
    local s
    s = "s"
    if ( = $arg3 1 ) [
        s = ""
    ]
    alias (concatword nc $arg1) (format "%1 %2" $arg2 (newchats.argsfromn $arg3))
    newchats.setdesc (concatword nc $arg1) (format "alias of %1, has %2 argument%3" $arg2 $arg3 $s)
]

newchats.rawstring = [
    local text, ret, inescape
    text = (escape $arg1)
    ret = ""
    inescape = 0
    loop i (stringlen $text) [
        local char
        char = (substring $text $i 1)
        if (= $inescape 1) [
            ret = (format "%1%2" $ret $char)
            inescape = 0
        ] [
            if (=s $char "^^") [
                inescape = 1
            ] [
                if (!=s $char "^"") [
                    ret = (format "%1%2" $ret $char)
                ]
            ]
        ]
    ]
    result $ret
]

// run action with argument if argument's length is ok
newchats.checklength = [
    local action argument
    action = $arg1
    argument = (filter $arg2 0 0 1)
    filtered = (newchats.rawstring $argument)
    if (<= (stringlen $filtered) $messagelength) [
        $action $argument
    ] [
        echo (format "that message is too long (%1c, max %2c)" (stringlen $filtered) $messagelength)
    ]
]


// say without colour.
newchats.action.sayraw = [
    newchats.checklength say $arg1
]

// sayteam without colour.
newchats.action.sayteamraw = [
    newchats.checklength sayteam $arg1
]

// say with colour.
newchats.action.say = [
    newchats.checklength say (format "^f[%1]%2" (+ $newchats.settings.chatcolour) $arg1)
]

// sayteam with colour.
newchats.action.sayteam = [
    newchats.checklength sayteam (format "^f[%1]%2" (+ $newchats.settings.chatcolour) $arg1)
]

// Default text input.
newchats.action.inputsay = [
    inputcommand "" [newchats.action.say $commandbuffer] "textures/chat" 0 "s"
]

// Default team text input.
newchats.action.inputsayteam = [
   inputcommand "" [newchats.action.sayteam $commandbuffer] (getplayerteamicon) (getplayerteamcolour) 0 "s"
]

// Generator-action combination.
newchats.combo = [
    local name short desc params generator
    name = $arg1
    short = $arg2
    desc = $arg3
    params = $arg4
    generator = $arg5
    // Base aliases.
    alias (concatword newchats.gen. $name) $generator
    alias (concatword newchats.action. $name) (format "newchats.action.sayraw (%1 %2)" (concatword newchats.gen. $name) (newchats.argsfromn (listlen $params)))
    alias (concatword newchats.action.team. $name) (format "newchats.action.sayteamraw (%1 %2)" (concatword newchats.gen. $name) (newchats.argsfromn (listlen $params)))
    // Short aliases.
    newchats.short (concatword g $short) (concatword newchats.gen. $name) (listlen $params)
    newchats.short (concatword t $short) (concatword newchats.action.team. $name) (listlen $params)
    newchats.short $short (concatword newchats.action. $name) (listlen $params)
    // Description.
    newchats.setdesc (concatword newchats.gen. $name) $desc $params
    newchats.setdesc (concatword newchats.action. $name) $desc $params
    newchats.setdesc (concatword newchats.action.team. $name) $desc $params
    // Overwrite short desc with more description.
    newchats.setdesc (concatword ncg $short) $desc $params
    newchats.setdesc (concatword nct $short) $desc $params
    newchats.setdesc (concatword nc $short) $desc $params
    // Meta info.
    newchats.info.combos = (concat $newchats.info.combos $name)
    alias (concatword newchats.info.short. $name) $short
]
newchats.info.combos = ""

newchats.combo alternate alt "alternate colour codes for each character" "<colour1> <colour2> <text>" [
    local ret, colour1, colour2, text, current
    colour1 = $arg1
    colour2 = $arg2
    text = $arg3
    ret = ""
    current = $colour1
    loop i (stringlen $text) [
        local char
        char = (substring $text $i 1)
        ret = (format "%1^f%2%3" $ret $current $char)
        if (=s $current $colour1 ) [
            current = $colour2
        ] [
            current = $colour1
        ]
    ]
    result $ret
]

newchats.combo alternatewords altw "alternate colour codes for each word" "<colour1> <colour2> <text>" [
    local ret, colour1, colour2, text, current
    colour1 = $arg1
    colour2 = $arg2
    text = $arg3
    current = $colour1
    ret = (format "^f%1" $current)
    current = $colour2
    loop i (stringlen $text) [
        local char
        char = (substring $text $i 1)
        ret = (format "%1%2" $ret $char)
        if (=s $char " ") [
            ret = (format "%1^f%2" $ret $current)
            if (=s $current $colour1 ) [
                current = $colour2
            ] [
                current = $colour1
            ]
        ]
    ]
    result $ret
]

// Simplified rainbow for contrast.
newchats.rainbow = "roygcbv"
newchats.colours = "roygbvkwRGBYOpP"

newchats.combo rainbow rb "static rainbow" "<text>" [
    local ret, text, ri
    text = $arg1
    ret = ""
    ri = 0
    loop i (stringlen $text) [
        local char colour
        char = (substring $text $i 1)
        colour = (substring $newchats.rainbow $ri 1)
        ret = (format "%1%^f%2%3" $ret $colour $char)
        ri = (+ $ri 1)
        if ( >= $ri (stringlen $newchats.rainbow )) [
            ri = 0
        ]
    ]
    result $ret
]

newchats.combo rainbowblink rbb "blinking rainbow" "<text>" [
    local ret, text, ri, ri2
    text = $arg1
    ret = ""
    ri = 0
    ri2 = 1
    loop i (stringlen $text) [
        local char colour colour2
        char = (substring $text $i 1)
        colour = (substring $newchats.rainbow $ri 1)
        colour2 = (substring $newchats.rainbow $ri2 1)
        ret = (format "%1%^fz%2%3%4" $ret $colour $colour2 $char)
        ri = (+ $ri 1)
        if ( >= $ri (stringlen $newchats.rainbow )) [
            ri = 0
        ]
        ri2 = (+ $ri2 1)
        if ( >= $ri2 (stringlen $newchats.rainbow )) [
            ri2 = 0
        ]
    ]
    result $ret
]

newchats.combo rainbowbg rbg "rainbow with background" "<bg colour> <text>" [
    local ret, bg, text, ri
    bg = $arg1
    text = $arg2
    ret = ""
    ri = 0
    loop i (stringlen $text) [
        local char colour
        char = (substring $text $i 1)
        colour = (substring $newchats.rainbow $ri 1)
        ret = (format "%1%^fz%2%3%4" $ret $colour $bg $char)
        ri = (+ $ri 1)
        if ( >= $ri (stringlen $newchats.rainbow )) [
            ri = 0
        ]
    ]
    result $ret
]

newchats.combo random rnd "randomly coloured text" "<text>" [
    local ret, text
    text = $arg1
    ret = ""
    loop i (stringlen $text) [
        local char colour
        char = (substring $text $i 1)
        colour = (substring $newchats.colours (rnd (stringlen $newchats.colours)) 1)
        ret = (format "%1%^f%2%3" $ret $colour $char)
    ]
    result $ret
]

newchats.combo randomblink rndb "randomly coloured blinking text" "<text>" [
    local ret, text
    text = $arg1
    ret = ""
    loop i (stringlen $text) [
        local char colour colour2
        char = (substring $text $i 1)
        colour = (substring $newchats.colours (rnd (stringlen $newchats.colours)) 1)
        colour2 = (substring $newchats.colours (rnd (stringlen $newchats.colours)) 1)
        // Greatly reduce chances of same colour.
        if (=s $colour $colour2) [
            colour2 = (substring $newchats.colours (rnd (stringlen $newchats.colours)) 1)
        ]
        ret = (format "%1%^fz%2%3%4" $ret $colour $colour2 $char)
    ]
    result $ret
]

newchats.colour.r = [
    result (& (>> $arg1 0x10) 0xFF)
]

newchats.colour.g = [
    result (& (>> $arg1 0x8) 0xFF)
]

newchats.colour.b = [
    result (& $arg1 0xFF)
]

newchats.colour.rgb = [
    result (+ (<< $arg1 0x10) (<< $arg2 0x8) $arg3)
]

newchats.combo gradient grad "gradient" "<start> <end> <text>" [
    local ret, start, end, addr, addg, addb, text, colour
    start = $arg1
    end = $arg2
    text = $arg3
    ret = ""
    addr = (div (- (newchats.colour.r $end) (newchats.colour.r $start)) (stringlen $text))
    addg = (div (- (newchats.colour.g $end) (newchats.colour.g $start)) (stringlen $text))
    addb = (div (- (newchats.colour.b $end) (newchats.colour.b $start)) (stringlen $text))
    colour = $start
    loop i (stringlen $text) [
        local char, r, g, b
        char = (substring $text $i 1)
        ret = (format "%1%^f[%2]%3" $ret $colour $char)
        r = (newchats.colour.r $colour)
        g = (newchats.colour.g $colour)
        b = (newchats.colour.b $colour)
        r = (+ $r $addr)
        g = (+ $g $addg)
        b = (+ $b $addb)
        colour = (newchats.colour.rgb $r $g $b)
    ]
    result $ret
]

newchats.combo randomgradient gradr "random gradient" "<text>" [
    result (newchats.gen.gradient (rnd 0xFFFFFF -0xFFFFFF) (rnd 0xFFFFFF -0xFFFFFF) $arg1)
]

// Bind common inputs.
newchats.action.bind = [
    bind RETURN newchats.action.inputsay
    bind T newchats.action.inputsay
    bind Y newchats.action.inputsayteam
    echo "newchats is now bound to your communication keys"
]

// Settings
newchats.setting chatcolour "default colour for chat" "<color>"
newchats.setting version "settings version" "<version>"

// Check if setup is needed.
if (!= (getalias newchats.settings.version) $newchats.VERSION) [
    echo (format "initializing ^fs%1^fS %2, written by Beha" (ncgrb newchats) $newchats.VERSION)
    newchats.setup
    echo "if you have not already done so, run ^fs^fy/ncbind^fS to bind newchats to your communication keys and ^fs^fy/ncgui^fS to set your chat colour"
]

newgui newchats [
    guifont "emphasis" [ guitext (format "^fs%1^fS %2 by Beha" (ncgrb newchats) $newchats.VERSION) ]
    guifont "small" [ guitext "ghostsclan.zapto.org/files/newchats.cfg" ]
    guicenter [ guifont "emphasis" [ guitext "chat colour:" ] ]
    guicenter [
        guihexpreview $newchats.settings.chatcolour "hex-value"
        guistrut 1
        guilist [
            guirgbsliders newchats.settings.chatcolour
        ]
    ]
    guistrut 1
    guifont "small" [ guitext "enclose text in ^"quotes^" if it has more than one word" ]
    guifont "small" [ guitext "set your chat colour with ^fs^fy/nccolour^fS or this gui, bind newchats to T, Y, and ENTER with ^fs^fy/ncbind^fS" ]
    guifont "small" [ guitext "use nc<x> for say, nct<x> for sayteam, and ncg<x> for use in scripts" ]
    guistrut 0.5
    // Generate dynamic help from the meta info.
    looplist i $newchats.info.combos [
        guistrut 0
        guifont "small" [ guitext (format "^fs^fy/nc%1^fS ^fs^fg%2^fS: %3" (getalias (concatword newchats.info.short. $i)) (getalias (concatword newchats.info.desc.params. (concatword newchats.gen. $i))) (getalias (concatword newchats.info.desc. (concatword newchats.gen. $i)))) ]
    ]
]

newchats.gui = [
    showgui newchats
]

// Base shorthand aliases.
newchats.short say newchats.action.say 1
newchats.short sayteam newchats.action.sayteam 1
newchats.short "bind" "newchats.action.bind" 0
newchats.short colour newchats.set.chatcolour 1
newchats.short gui newchats.gui 0
