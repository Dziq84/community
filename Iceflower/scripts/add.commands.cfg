//Author: Iceflower


//PRIVLEV returns the privileg level of the cn
//hiw: getclientpriv returns one if you have this level and 0 if you havent
//for your own use: (privlev getclientnum)
setdesc "privlev" "returns the priv level of a player" "<cn>"
privlev = [
	cn_num = $arg1
	levtest = 1	//prepare loop
	loopwhile itemp 8 [ = $levtest 1 ] [	//counts to 7
		levtest = (getclientpriv $cn_num $itemp)
		privlev_v = $itemp	//save privlev because itemp will be cleared after the loop
	]
	result (- $privlev_v 1)	//privlev returns now the priv level value
]


//LISTSUMF returns the sum of the list as a float
//hiw: sum all items of the list
setdesc "listsumf" "returns the sum of the list as a float" "<list>"
listsumf = [//$arg1 = <input list>
	listsum_v = 0
	looplist itemp ($arg1) [
		listsum_v = (+f $listsum_v $itemp)
	]
	result $listsum_v
]


//BITLIST returns a list of bits that could go into the number
//hiw: show comments below
setdesc "bitlist" "returns a list of bits that could go into the number^nexample: bitlist <number>" "<number>"
bitlist = [	//$arg1 = sum of bits; returns the parts of a sum of bits
	bit_list = ""
	cursum_v = $arg1	//the current sum of bits
	//looks for the highest exponent of the bits
	exp_v = -1	//prepare while
	while [< (pow 2 $exp_v) $cursum_v] [	//the highest 2^X is lower or equal as the sum of all
		exp_v = (+ $exp_v 1)
	]
	exp_v = (- $exp_v 1)	//the exponent is one too big
	basexp_v = (pow 2 $exp_v)
	//returns the parts of the bits
	while [!= $cursum_v 0] [	//the current sum will reduce until its zero
		while [> $basexp_v $cursum_v] [	//reduce the exponent until its equal or lower as the cursum of the bits
			exp_v = (- $exp_v 1)
			basexp_v = (pow 2 $exp_v)	//maybe faster as calc every time new
		]
		cursum_v = (- $cursum_v $basexp_v)	//its lower = part of the sum
		bit_list = (concat $bit_list (+ $basexp_v))
	]
	result $bit_list
]