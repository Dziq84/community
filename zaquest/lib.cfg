// Collect all arguments into a list
//
// /myalias = [ echo (do [@collectargs]) ]
// /myalias 1 2 3
// "1" "2" "3"
collectargs = [ loopconcat i [@numargs] [ escape $[arg@(+ $i 1)] ] ]

// Takes a function name and a list of arguments. Calls the function
// with gieven arguemnts and returns the result.
//
//   /echo (apply + [1 2 3 4])
//   10
//   /echo (apply concat [[1 2] [3 4]])
//   1 2 3 4
apply = [ do (concat [$arg1] $arg2) ]

// Takes an integer `n` and a list. Returns first `n` elements of the
// list.
//
//   /echo (listtake 3 [1 2 3 4 5])
//   1 2 3
listtake = [ sublist $arg2 0 $arg1 ]

// Takes an integer `n` and a list. Skips first `n` elements of the
// list and returns what remains.
//
//   /echo (listdrop 3 [1 2 3 4 5])
//   4 5
listdrop = [ sublist $arg2 $arg1 ]

// split path into directory and filename parts
//
//   /echo (splitpath "first dir/second dir/file name")
//   "first dir/second dir" "file name"
//   /echo (splitpath "first dir\\second dir\\file name")
//   "first dir\\second dir" "file name"
//   /echo (splitpath "only file name"
//   "only file name"
splitpath = [
  local fname prevpos sep seplen pos
  fname = $arg1
  prevpos = 0
  if ($arg2) [ sep = $arg2 ] [ sep = "/" ]
  seplen = (strlen $sep)
  pos = (strstr $fname $sep)
  while [!= $pos -1] [
    fname = (substring $fname (+ $pos $seplen))
    prevpos = (+ $prevpos $pos $seplen)
    pos = (strstr $fname $sep)
  ]
  result [@(escape (substring $arg1 0 (- $prevpos $seplen))) @(escape $fname)]
]

// explode a string using separator
//
//   /echo (explode "hello there/world/how's life?" "/")
//   "hello there" "world" "how's life?"
explode = [
  local tail sep seplen chunks pos
  tail = $arg1
  sep = $arg2
  seplen = (strlen $sep)
  chunks = []
  pos = (strstr $tail $sep)
  while [!= $pos -1] [
    next = (substring $tail 0 $pos)
    tail = (substring $tail (+ $pos $seplen))
    chunks = (concat $chunks (escape $next))
    pos = (strstr $tail $sep)
  ]
  result (concat $chunks (escape $tail))
]

// Create a comparator from less (<, <f, <s or your own) operator.
//
//   /cmp = (mkcmp <)
//   /echo (cmp 1 1)
//   0
//   /echo (cmp 0 1)
//   -1
//   /echo (cmp 1 0)
//   1
mkcmp = [ result [? (@arg1 $arg1 $arg2) -1 (? (@arg1 $arg2 $arg1) 1 0)] ]

// Remove duplicates from a list. Does not preserve order.
nub = [
  local unique sorted prev rest
  sorted = (sortlist $arg1 a b [<s $a $b])
  prev = (at $sorted 0)
  unique = [@(escape $prev)]
  rest = (listdrop 1 $sorted)
  looplist elem $rest [
    if (!=s $elem $prev) [
      unique = (concat $unique (escape $elem))
      prev = $elem
    ]
  ]
  result $unique
]

// Set union.
//
//   /echo (listadd "abuse abuse train" "train wet wet" "wet sand sand")
//   abuse sand train wet
listadd = [ nub (apply concat (do [@collectargs])) ]


// Set intersection.
//
//   /echo (intersection [1 2 3 4 5] [1 2 3] [2 3 4])
//   2 3
intersection = [
  local common skip
  common = $arg1
  loop i (- $numargs 1) [
    skip = (listdel $common $[arg@(+ $i 2)])
    common = (listdel $common $skip)
  ]
  result $common
]
